// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: transfer_queries.sql

package db

import (
	"context"
)

const createtransfers = `-- name: Createtransfers :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount 
) VALUES (
  $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreatetransfersParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) Createtransfers(ctx context.Context, arg CreatetransfersParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createtransfers, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfter = `-- name: DeleteTransfter :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTransfter(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTransfter, id)
	return err
}

const getTransfter = `-- name: GetTransfter :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfter(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfter, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfters = `-- name: ListTransfters :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListTransftersParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListTransfters(ctx context.Context, arg ListTransftersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
