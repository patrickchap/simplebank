// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: entry_queries.sql

package db

import (
	"context"
)

const createEntries = `-- name: CreateEntries :one
/* CREATE TABLE entries (
  id BIGSERIAL PRIMARY KEY,
  account_id bigint NOT NULL,
  amount bigint NOT NULL,
  created_at timestamptz NOT NULL DEFAULT 'now()'
) */


INSERT INTO entries (
  account_id,
  amount 
) VALUES (
  $1, $2
)
RETURNING id, account_id, amount, created_at
`

type CreateEntriesParams struct {
	AccountID int64
	Amount    int64
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntries, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntries = `-- name: DeleteEntries :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntries(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEntries, id)
	return err
}

const getEntries = `-- name: GetEntries :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntriess = `-- name: ListEntriess :many
SELECT id, account_id, amount, created_at FROM entries
ORDER BY id 
LIMIT $1
OFFSET $2
`

type ListEntriessParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListEntriess(ctx context.Context, arg ListEntriessParams) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntriess, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
